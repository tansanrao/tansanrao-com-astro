---
import Tag from '@components/Tag.astro';
import { formatDate } from '@utils/datetime';
import '@styles/global.css';

interface Author {
    name: string;
    url?: string;
}

interface Props {
    title: string;
    description: string;
    pubDate: Date;
    updatedDate?: Date;
    authors: Author[];
    readingTime?: string;
    tags: string[];
}

const { title, description, pubDate, updatedDate, authors, readingTime, tags } = Astro.props;
---

<section class="bg-light-ui/50 dark:bg-dark-ui/50 mb-12 w-full rounded-lg py-16">
    <div class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
        <header>
            <h1
                class="text-light-tx dark:text-dark-tx mb-4 max-w-3xl font-serif text-4xl !leading-tight sm:text-5xl"
            >
                {title}
            </h1>
            <div class="text-light-tx-2 dark:text-dark-tx-2 mb-8 text-lg">
                {description}
            </div>

            {/* Author list */}
            <div class="text-light-tx-2 dark:text-dark-tx-2 mb-2 flex items-center gap-2 text-sm">
                {
                    authors.map((author, index) => (
                        <>
                            {author.url ? (
                                <a
                                    href={author.url}
                                    class="hover:text-light-tx dark:hover:text-dark-tx transition-colors"
                                >
                                    {author.name}
                                </a>
                            ) : (
                                <span>{author.name}</span>
                            )}
                            {index < authors.length - 1 && <span>,</span>}
                        </>
                    ))
                }
            </div>

            {/* Dates and reading time */}
            <div
                class="text-light-tx-2 dark:text-dark-tx-2 mb-6 flex flex-col gap-1 text-sm sm:flex-row sm:items-center sm:gap-4"
            >
                <time datetime={pubDate.toISOString()}>
                    Published on {formatDate(pubDate, 'full')}
                </time>
                {
                    updatedDate && (
                        <>
                            <span class="hidden sm:inline">•</span>
                            <span>Updated on {formatDate(updatedDate, 'full')}</span>
                        </>
                    )
                }
                {
                    readingTime && (
                        <>
                            <span class="hidden sm:inline">•</span>
                            <span>{readingTime}</span>
                        </>
                    )
                }
            </div>

            {/* Tags */}
            <div class="flex flex-wrap gap-2">
                {tags.map((tag) => <Tag tag={tag} />)}
            </div>
        </header>
    </div>
</section>

<style>
    @reference "@styles/global.css";
</style>
