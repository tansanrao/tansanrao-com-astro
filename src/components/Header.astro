---
import Grid from './Grid.astro';
import GridBox from './GridBox.astro';
import ThemeSelector from './ThemeSelector.astro';
import MobileThemeSelector from './MobileThemeSelector.astro';

interface NavItem {
    href: string;
    label: string;
    match: (path: string) => boolean;
}

const navigation: NavItem[] = [
    {
        href: '/',
        label: 'Home',
        match: (path) => path === ''
    },
    {
        href: '/blog',
        label: 'Blog',
        match: (path) => path.startsWith('blog')
    },
    {
        href: '/news',
        label: 'News',
        match: (path) => path.startsWith('news')
    },
    {
        href: '/notes',
        label: 'Notes',
        match: (path) => path.startsWith('notes')
    },
    {
        href: '/rss',
        label: 'RSS',
        match: (path) => path.startsWith('rss')
    },
    {
        href: '/cv',
        label: 'CV',
        match: (path) => path.startsWith('cv')
    }
];

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // remove the leading slash
---

<header
    id="header"
    class:list={[
        'bg-light-bg dark:bg-dark-bg border-light-ui dark:border-dark-ui relative w-full border-b'
    ]}
>
    <!-- Mobile Layout: Simple flex -->
    <div class="mx-auto flex h-16 max-w-7xl items-center justify-between px-4 lg:hidden">
        <a
            href="/"
            class="text-light-tx dark:text-dark-tx font-serif text-2xl transition-colors hover:text-light-bl dark:hover:text-dark-bl"
            >Tanuj Ravi Rao</a
        >
        <button
            id="mobile-menu-toggle"
            class="text-light-tx-2 dark:text-dark-tx-2 hover:text-light-tx dark:hover:text-dark-tx rounded-md p-2 transition-colors"
            aria-label="Toggle mobile menu"
        >
            <svg
                id="hamburger-icon"
                class="h-6 w-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
            <svg
                id="close-icon"
                class="hidden h-6 w-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
    </div>

    <!-- Desktop Layout: Grid -->
    <Grid classes="hidden lg:flex items-center h-16 justify-between !max-w-7xl">
        <GridBox desktopStart={1} desktopEnd={3}>
            <a
                href="/"
                class="text-light-tx dark:text-dark-tx hover:text-light-bl dark:hover:text-dark-bl font-serif text-2xl transition-colors"
                >Tanuj Ravi Rao</a
            >
        </GridBox>

        <GridBox desktopStart={4} desktopEnd={12} classes="flex items-center justify-end">
            <nav class="flex items-center space-x-8">
                {
                    navigation.map(({ href, label, match }) => (
                        <a
                            href={href}
                            class:list={[
                                'text-light-tx-2 dark:text-dark-tx-2 hover:text-light-tx dark:hover:text-dark-tx text-base transition-colors',
                                match(currentPath) &&
                                    'text-light-tx dark:text-dark-tx font-semibold'
                            ]}
                        >
                            {label}
                        </a>
                    ))
                }
                <div>
                    <ThemeSelector />
                </div>
            </nav>
        </GridBox>
    </Grid>

    <!-- Mobile Dropdown Menu -->
    <div
        id="mobile-menu"
        class="bg-light-bg dark:bg-dark-bg border-light-ui dark:border-dark-ui absolute top-full right-0 left-0 z-50 hidden border-b shadow-lg lg:hidden"
    >
        <div class="mx-auto max-w-7xl px-4 py-4">
            <nav class="space-y-2">
                {
                    navigation.map(({ href, label, match }) => (
                        <a
                            href={href}
                            class:list={[
                                'block rounded-md px-3 py-2 text-base transition-colors',
                                match(currentPath)
                                    ? 'bg-light-bl dark:bg-dark-bl text-paper font-semibold'
                                    : 'text-light-tx-2 dark:text-dark-tx-2 hover:bg-light-ui dark:hover:bg-dark-ui hover:text-light-tx dark:hover:text-dark-tx'
                            ]}
                        >
                            {label}
                        </a>
                    ))
                }
            </nav>
            <div class="border-light-ui dark:border-dark-ui mt-4 border-t pt-4">
                <div class="flex items-center justify-between">
                    <span class="text-light-tx-2 dark:text-dark-tx-2 text-sm font-medium"
                        >Theme</span
                    >
                    <MobileThemeSelector />
                </div>
            </div>
        </div>
    </div>
</header>

<script>
    const mobileToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const hamburgerIcon = document.getElementById('hamburger-icon');
    const closeIcon = document.getElementById('close-icon');

    if (mobileToggle && mobileMenu && hamburgerIcon && closeIcon) {
        mobileToggle.addEventListener('click', () => {
            const isHidden = mobileMenu.classList.contains('hidden');

            if (isHidden) {
                mobileMenu.classList.remove('hidden');
                hamburgerIcon.classList.add('hidden');
                closeIcon.classList.remove('hidden');
            } else {
                mobileMenu.classList.add('hidden');
                hamburgerIcon.classList.remove('hidden');
                closeIcon.classList.add('hidden');
            }
        });

        // Close menu when clicking a navigation link
        const mobileNavLinks = mobileMenu.querySelectorAll('nav a');
        mobileNavLinks.forEach((link) => {
            link.addEventListener('click', () => {
                mobileMenu.classList.add('hidden');
                hamburgerIcon.classList.remove('hidden');
                closeIcon.classList.add('hidden');
            });
        });

        // Close menu when clicking outside
        document.addEventListener('click', (event) => {
            if (
                !mobileToggle.contains(event.target as Node) &&
                !mobileMenu.contains(event.target as Node)
            ) {
                mobileMenu.classList.add('hidden');
                hamburgerIcon.classList.remove('hidden');
                closeIcon.classList.add('hidden');
            }
        });
    }
</script>
